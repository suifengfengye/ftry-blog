{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1523085154000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1523085154000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1523085782000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1523085782000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1523085154000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1523085782000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1523085782000},{"_id":"source/_posts/my-hexo.md","hash":"3a2ada3bc060ff328ae053336aa6186ba88d25ca","modified":1523086108000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1523085154000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1523085782000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1523085782000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1523085782000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1523085782000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1523085782000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1523085154000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1523085782000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1523085154000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1523085154000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1523085154000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1523085154000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1523085154000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1523085154000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1523085154000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1523085154000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1523085154000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1523085154000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1523085154000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1523085154000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1523085154000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1523085782000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1523085782000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1523085154000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1523085154000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1523085154000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1523085782000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1523085782000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1523085782000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1523085154000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1523085154000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1523085154000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1523085154000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1523085154000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1523085154000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1523085154000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523085154000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1523085154000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1523085782000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523085154000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1523085154000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1523085154000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1523085154000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1523085154000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1523085154000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1523085154000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1523085154000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1523085154000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1523085154000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1523085154000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1523085154000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1523085154000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1523085154000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1523085154000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1523085154000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1523085154000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1523085154000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1523085154000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1523085154000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1523085154000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1523085154000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1523085154000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1523085154000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1523085154000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1523085154000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1523085154000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"d3 树图、封闭图","_content":"\n# 1、树图\n\n## 1.1、简介\n能够展现不同数据元素之间的依赖。树图中，两个节点之间只有一条路径相互连接彼此。\n\n## 1.2 构建树图\n\n- 数据\n\n树图的数据，仍然使用d3.hierarchy()或者d3.stratify()生成的数据。（见9-1）\n\n- 布局\n\n树图的布局，使用d3.tree()这个方法。d3.tree()是一个工厂方法，根据设置生成一个可以用于布局的方法（假设为 *_tree* ）。 \n\n*_tree()* 方法接收一个参数，即d3.hierarchy()或者d3.stratify()生成的数据座位参数。方法执行后，就往参数对象中回填x/y坐标数据。\n\n```\nvar _tree = d3.tree()\n        .size([w, h - 80]);\n// root为d3.hierarchy()或者d3.stratify()方法生成的树状结构数据\n_tree(root);\n```\n\n\n- 画圆圈、文本\n\n由于树状结构数据不是一个数组，而我们在画圆圈、或者现实文本的时候需要一个数组，所以需要将root转化为数组。使用 *root.descendants()* 方法转化。\n\n画圆圈、添加文本按正常的d3添加circle、text元素即可。\n\n```\nconst nodes = root.descendants();\n```\n\n- 画连线\n\n画竖线使用 *d3.linkVertical()* 方法，画横线使用 *d3.linkHorizonal()* 方法。这两个方法的返回值，都有x、y两个属性方法，把上一步中的树状结构节点中生存的x、y值传入即可。（x、y值已经使用d3.tree()(root)计算出来）。\n\n而连线的数据需要调用 *_tree(root).links()* 方法获取。\n\n具体代码如下：\n\n```\n// 画线\nconst linkFn = isVertical ? d3.linkVertical()\n        .x(function (d) { return d.x; })\n        .y(function (d) { return d.y; })\n        : d3.linkHorizontal()\n            .x(function (d) { return d.y; })\n            .y(function (d) { return d.x; })\n\n_bodyG.selectAll('.link')\n        .data(_tree(root).links())\n        .enter()\n        .append('path')\n        .attr('class', 'link')\n        .attr('d', linkFn);\n```\n\n2、封闭图\n\n封闭图跟创建树图的步骤基本一致。下面只总结一下封闭图的不同知识点。\n\n- 布局\n\n布局使用 *d3.pack()* 方法，这是一个工厂方法。根据设置可以生成一个可以用于布局封闭图的方法（假设生成的方法为 *_pack* ）.\n\n```\nvar _pack = d3.pack()\n    .size([w, h])\n    .padding(3);\n```\n\n调用 *_pack()* 方法，可以为树状结构数据计算出坐标值（包括x／y/r这些属性值）。\n\n```\n// root为树状结构数据，由d3.hierarchy()或者d3.stratify()方法生成。\n_pack(root);\n```\n\n- 背景色\n\n```\nvar _colors = d3.scaleSequential(d3.interpolateMagma)\n    .domain([-4, 4]);\n```\n\n- 剪切\n\n由于圆圈内的text文本可能超出范围，为避免这种情况出现，就可以使用svg的剪切功能。\n\n```\ncircle-id\nclipPath\n    - use('xlink:href', '#circle-id')\n    - id: pack-clip-id\ntext\n    - attr('clip-path', 'url(#pack-clip-id)')\n```\n\n- hover\n\nd3支持svg的事件。使用 *mouseover* 和 *mouseout* 来模拟hover。\n\n```\npackEnters.each(function (d) {\n        d.node = this;\n    }).on('mouseover', hovered(true))\n        .on('mouseout', hovered(false));\n    function hovered (hover) {\n        return (d) => {\n            d3.selectAll(d.ancestors().map(function (d) {\n                return d.node;\n            })).classed('pack-node-hover', hover);\n        }\n    };\n```","source":"_posts/d3-tree-pack.md","raw":"---\ntitle: d3 树图、封闭图\n---\n\n# 1、树图\n\n## 1.1、简介\n能够展现不同数据元素之间的依赖。树图中，两个节点之间只有一条路径相互连接彼此。\n\n## 1.2 构建树图\n\n- 数据\n\n树图的数据，仍然使用d3.hierarchy()或者d3.stratify()生成的数据。（见9-1）\n\n- 布局\n\n树图的布局，使用d3.tree()这个方法。d3.tree()是一个工厂方法，根据设置生成一个可以用于布局的方法（假设为 *_tree* ）。 \n\n*_tree()* 方法接收一个参数，即d3.hierarchy()或者d3.stratify()生成的数据座位参数。方法执行后，就往参数对象中回填x/y坐标数据。\n\n```\nvar _tree = d3.tree()\n        .size([w, h - 80]);\n// root为d3.hierarchy()或者d3.stratify()方法生成的树状结构数据\n_tree(root);\n```\n\n\n- 画圆圈、文本\n\n由于树状结构数据不是一个数组，而我们在画圆圈、或者现实文本的时候需要一个数组，所以需要将root转化为数组。使用 *root.descendants()* 方法转化。\n\n画圆圈、添加文本按正常的d3添加circle、text元素即可。\n\n```\nconst nodes = root.descendants();\n```\n\n- 画连线\n\n画竖线使用 *d3.linkVertical()* 方法，画横线使用 *d3.linkHorizonal()* 方法。这两个方法的返回值，都有x、y两个属性方法，把上一步中的树状结构节点中生存的x、y值传入即可。（x、y值已经使用d3.tree()(root)计算出来）。\n\n而连线的数据需要调用 *_tree(root).links()* 方法获取。\n\n具体代码如下：\n\n```\n// 画线\nconst linkFn = isVertical ? d3.linkVertical()\n        .x(function (d) { return d.x; })\n        .y(function (d) { return d.y; })\n        : d3.linkHorizontal()\n            .x(function (d) { return d.y; })\n            .y(function (d) { return d.x; })\n\n_bodyG.selectAll('.link')\n        .data(_tree(root).links())\n        .enter()\n        .append('path')\n        .attr('class', 'link')\n        .attr('d', linkFn);\n```\n\n2、封闭图\n\n封闭图跟创建树图的步骤基本一致。下面只总结一下封闭图的不同知识点。\n\n- 布局\n\n布局使用 *d3.pack()* 方法，这是一个工厂方法。根据设置可以生成一个可以用于布局封闭图的方法（假设生成的方法为 *_pack* ）.\n\n```\nvar _pack = d3.pack()\n    .size([w, h])\n    .padding(3);\n```\n\n调用 *_pack()* 方法，可以为树状结构数据计算出坐标值（包括x／y/r这些属性值）。\n\n```\n// root为树状结构数据，由d3.hierarchy()或者d3.stratify()方法生成。\n_pack(root);\n```\n\n- 背景色\n\n```\nvar _colors = d3.scaleSequential(d3.interpolateMagma)\n    .domain([-4, 4]);\n```\n\n- 剪切\n\n由于圆圈内的text文本可能超出范围，为避免这种情况出现，就可以使用svg的剪切功能。\n\n```\ncircle-id\nclipPath\n    - use('xlink:href', '#circle-id')\n    - id: pack-clip-id\ntext\n    - attr('clip-path', 'url(#pack-clip-id)')\n```\n\n- hover\n\nd3支持svg的事件。使用 *mouseover* 和 *mouseout* 来模拟hover。\n\n```\npackEnters.each(function (d) {\n        d.node = this;\n    }).on('mouseover', hovered(true))\n        .on('mouseout', hovered(false));\n    function hovered (hover) {\n        return (d) => {\n            d3.selectAll(d.ancestors().map(function (d) {\n                return d.node;\n            })).classed('pack-node-hover', hover);\n        }\n    };\n```","slug":"d3-tree-pack","published":1,"date":"2018-04-07T07:27:01.000Z","updated":"2018-04-08T07:04:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqgpl8d0002onfyy1zuwr0d","content":"<h1 id=\"1、树图\"><a href=\"#1、树图\" class=\"headerlink\" title=\"1、树图\"></a>1、树图</h1><h2 id=\"1-1、简介\"><a href=\"#1-1、简介\" class=\"headerlink\" title=\"1.1、简介\"></a>1.1、简介</h2><p>能够展现不同数据元素之间的依赖。树图中，两个节点之间只有一条路径相互连接彼此。</p>\n<h2 id=\"1-2-构建树图\"><a href=\"#1-2-构建树图\" class=\"headerlink\" title=\"1.2 构建树图\"></a>1.2 构建树图</h2><ul>\n<li>数据</li>\n</ul>\n<p>树图的数据，仍然使用d3.hierarchy()或者d3.stratify()生成的数据。（见9-1）</p>\n<ul>\n<li>布局</li>\n</ul>\n<p>树图的布局，使用d3.tree()这个方法。d3.tree()是一个工厂方法，根据设置生成一个可以用于布局的方法（假设为 <em>_tree</em> ）。 </p>\n<p><em>_tree()</em> 方法接收一个参数，即d3.hierarchy()或者d3.stratify()生成的数据座位参数。方法执行后，就往参数对象中回填x/y坐标数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _tree = d3.tree()</span><br><span class=\"line\">        .size([w, h - 80]);</span><br><span class=\"line\">// root为d3.hierarchy()或者d3.stratify()方法生成的树状结构数据</span><br><span class=\"line\">_tree(root);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>画圆圈、文本</li>\n</ul>\n<p>由于树状结构数据不是一个数组，而我们在画圆圈、或者现实文本的时候需要一个数组，所以需要将root转化为数组。使用 <em>root.descendants()</em> 方法转化。</p>\n<p>画圆圈、添加文本按正常的d3添加circle、text元素即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const nodes = root.descendants();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>画连线</li>\n</ul>\n<p>画竖线使用 <em>d3.linkVertical()</em> 方法，画横线使用 <em>d3.linkHorizonal()</em> 方法。这两个方法的返回值，都有x、y两个属性方法，把上一步中的树状结构节点中生存的x、y值传入即可。（x、y值已经使用d3.tree()(root)计算出来）。</p>\n<p>而连线的数据需要调用 <em>_tree(root).links()</em> 方法获取。</p>\n<p>具体代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 画线</span><br><span class=\"line\">const linkFn = isVertical ? d3.linkVertical()</span><br><span class=\"line\">        .x(function (d) &#123; return d.x; &#125;)</span><br><span class=\"line\">        .y(function (d) &#123; return d.y; &#125;)</span><br><span class=\"line\">        : d3.linkHorizontal()</span><br><span class=\"line\">            .x(function (d) &#123; return d.y; &#125;)</span><br><span class=\"line\">            .y(function (d) &#123; return d.x; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">_bodyG.selectAll(&apos;.link&apos;)</span><br><span class=\"line\">        .data(_tree(root).links())</span><br><span class=\"line\">        .enter()</span><br><span class=\"line\">        .append(&apos;path&apos;)</span><br><span class=\"line\">        .attr(&apos;class&apos;, &apos;link&apos;)</span><br><span class=\"line\">        .attr(&apos;d&apos;, linkFn);</span><br></pre></td></tr></table></figure>\n<p>2、封闭图</p>\n<p>封闭图跟创建树图的步骤基本一致。下面只总结一下封闭图的不同知识点。</p>\n<ul>\n<li>布局</li>\n</ul>\n<p>布局使用 <em>d3.pack()</em> 方法，这是一个工厂方法。根据设置可以生成一个可以用于布局封闭图的方法（假设生成的方法为 <em>_pack</em> ）.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _pack = d3.pack()</span><br><span class=\"line\">    .size([w, h])</span><br><span class=\"line\">    .padding(3);</span><br></pre></td></tr></table></figure>\n<p>调用 <em>_pack()</em> 方法，可以为树状结构数据计算出坐标值（包括x／y/r这些属性值）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// root为树状结构数据，由d3.hierarchy()或者d3.stratify()方法生成。</span><br><span class=\"line\">_pack(root);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>背景色</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _colors = d3.scaleSequential(d3.interpolateMagma)</span><br><span class=\"line\">    .domain([-4, 4]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>剪切</li>\n</ul>\n<p>由于圆圈内的text文本可能超出范围，为避免这种情况出现，就可以使用svg的剪切功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">circle-id</span><br><span class=\"line\">clipPath</span><br><span class=\"line\">    - use(&apos;xlink:href&apos;, &apos;#circle-id&apos;)</span><br><span class=\"line\">    - id: pack-clip-id</span><br><span class=\"line\">text</span><br><span class=\"line\">    - attr(&apos;clip-path&apos;, &apos;url(#pack-clip-id)&apos;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hover</li>\n</ul>\n<p>d3支持svg的事件。使用 <em>mouseover</em> 和 <em>mouseout</em> 来模拟hover。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packEnters.each(function (d) &#123;</span><br><span class=\"line\">        d.node = this;</span><br><span class=\"line\">    &#125;).on(&apos;mouseover&apos;, hovered(true))</span><br><span class=\"line\">        .on(&apos;mouseout&apos;, hovered(false));</span><br><span class=\"line\">    function hovered (hover) &#123;</span><br><span class=\"line\">        return (d) =&gt; &#123;</span><br><span class=\"line\">            d3.selectAll(d.ancestors().map(function (d) &#123;</span><br><span class=\"line\">                return d.node;</span><br><span class=\"line\">            &#125;)).classed(&apos;pack-node-hover&apos;, hover);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1、树图\"><a href=\"#1、树图\" class=\"headerlink\" title=\"1、树图\"></a>1、树图</h1><h2 id=\"1-1、简介\"><a href=\"#1-1、简介\" class=\"headerlink\" title=\"1.1、简介\"></a>1.1、简介</h2><p>能够展现不同数据元素之间的依赖。树图中，两个节点之间只有一条路径相互连接彼此。</p>\n<h2 id=\"1-2-构建树图\"><a href=\"#1-2-构建树图\" class=\"headerlink\" title=\"1.2 构建树图\"></a>1.2 构建树图</h2><ul>\n<li>数据</li>\n</ul>\n<p>树图的数据，仍然使用d3.hierarchy()或者d3.stratify()生成的数据。（见9-1）</p>\n<ul>\n<li>布局</li>\n</ul>\n<p>树图的布局，使用d3.tree()这个方法。d3.tree()是一个工厂方法，根据设置生成一个可以用于布局的方法（假设为 <em>_tree</em> ）。 </p>\n<p><em>_tree()</em> 方法接收一个参数，即d3.hierarchy()或者d3.stratify()生成的数据座位参数。方法执行后，就往参数对象中回填x/y坐标数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _tree = d3.tree()</span><br><span class=\"line\">        .size([w, h - 80]);</span><br><span class=\"line\">// root为d3.hierarchy()或者d3.stratify()方法生成的树状结构数据</span><br><span class=\"line\">_tree(root);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>画圆圈、文本</li>\n</ul>\n<p>由于树状结构数据不是一个数组，而我们在画圆圈、或者现实文本的时候需要一个数组，所以需要将root转化为数组。使用 <em>root.descendants()</em> 方法转化。</p>\n<p>画圆圈、添加文本按正常的d3添加circle、text元素即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const nodes = root.descendants();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>画连线</li>\n</ul>\n<p>画竖线使用 <em>d3.linkVertical()</em> 方法，画横线使用 <em>d3.linkHorizonal()</em> 方法。这两个方法的返回值，都有x、y两个属性方法，把上一步中的树状结构节点中生存的x、y值传入即可。（x、y值已经使用d3.tree()(root)计算出来）。</p>\n<p>而连线的数据需要调用 <em>_tree(root).links()</em> 方法获取。</p>\n<p>具体代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 画线</span><br><span class=\"line\">const linkFn = isVertical ? d3.linkVertical()</span><br><span class=\"line\">        .x(function (d) &#123; return d.x; &#125;)</span><br><span class=\"line\">        .y(function (d) &#123; return d.y; &#125;)</span><br><span class=\"line\">        : d3.linkHorizontal()</span><br><span class=\"line\">            .x(function (d) &#123; return d.y; &#125;)</span><br><span class=\"line\">            .y(function (d) &#123; return d.x; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">_bodyG.selectAll(&apos;.link&apos;)</span><br><span class=\"line\">        .data(_tree(root).links())</span><br><span class=\"line\">        .enter()</span><br><span class=\"line\">        .append(&apos;path&apos;)</span><br><span class=\"line\">        .attr(&apos;class&apos;, &apos;link&apos;)</span><br><span class=\"line\">        .attr(&apos;d&apos;, linkFn);</span><br></pre></td></tr></table></figure>\n<p>2、封闭图</p>\n<p>封闭图跟创建树图的步骤基本一致。下面只总结一下封闭图的不同知识点。</p>\n<ul>\n<li>布局</li>\n</ul>\n<p>布局使用 <em>d3.pack()</em> 方法，这是一个工厂方法。根据设置可以生成一个可以用于布局封闭图的方法（假设生成的方法为 <em>_pack</em> ）.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _pack = d3.pack()</span><br><span class=\"line\">    .size([w, h])</span><br><span class=\"line\">    .padding(3);</span><br></pre></td></tr></table></figure>\n<p>调用 <em>_pack()</em> 方法，可以为树状结构数据计算出坐标值（包括x／y/r这些属性值）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// root为树状结构数据，由d3.hierarchy()或者d3.stratify()方法生成。</span><br><span class=\"line\">_pack(root);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>背景色</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _colors = d3.scaleSequential(d3.interpolateMagma)</span><br><span class=\"line\">    .domain([-4, 4]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>剪切</li>\n</ul>\n<p>由于圆圈内的text文本可能超出范围，为避免这种情况出现，就可以使用svg的剪切功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">circle-id</span><br><span class=\"line\">clipPath</span><br><span class=\"line\">    - use(&apos;xlink:href&apos;, &apos;#circle-id&apos;)</span><br><span class=\"line\">    - id: pack-clip-id</span><br><span class=\"line\">text</span><br><span class=\"line\">    - attr(&apos;clip-path&apos;, &apos;url(#pack-clip-id)&apos;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hover</li>\n</ul>\n<p>d3支持svg的事件。使用 <em>mouseover</em> 和 <em>mouseout</em> 来模拟hover。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packEnters.each(function (d) &#123;</span><br><span class=\"line\">        d.node = this;</span><br><span class=\"line\">    &#125;).on(&apos;mouseover&apos;, hovered(true))</span><br><span class=\"line\">        .on(&apos;mouseout&apos;, hovered(false));</span><br><span class=\"line\">    function hovered (hover) &#123;</span><br><span class=\"line\">        return (d) =&gt; &#123;</span><br><span class=\"line\">            d3.selectAll(d.ancestors().map(function (d) &#123;</span><br><span class=\"line\">                return d.node;</span><br><span class=\"line\">            &#125;)).classed(&apos;pack-node-hover&apos;, hover);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}